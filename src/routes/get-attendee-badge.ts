import { FastifyInstance } from "fastify";
import { ZodTypeProvider } from "fastify-type-provider-zod";
import { z } from "zod";
import { prisma } from "../lib/prisma";

// Modify the function to use the ticketId generated by the generateNanoId function

export async function getAttendeeBadge(app: FastifyInstance) {
  app.withTypeProvider<ZodTypeProvider>().get(
    "/attendees/:ticketId/badge",
    {
      schema: {
        params: z.object({
          ticketId: z.string().min(10).max(10),
        }),
        response: {
          200: z.object({
            attendee: z.object({
              name: z.string(),
              email: z.string().email(),
              ticketId: z.string(),
              eventTitle: z.string(),
            }),
          }),
          404: z.object({
            message: z.string(),
          }),
        },
      },
    },
    async (request, reply) => {
      const { ticketId } = request.params;

      const attendee = await prisma.attendee.findUnique({
        select: {
          name: true,
          email: true,
          ticketId: true,
          event: {
            select: {
              title: true,
            },
          },
        },
        where: {
          ticketId: ticketId,
        },
      });

      if (attendee === null) {
        return reply.code(404).send({ message: "Attendee not found" });
      }

      return reply.send({
        attendee: {
          name: attendee.name,
          email: attendee.email,
          ticketId: ticketId,
          eventTitle: attendee.event.title,
        },
      });
    }
  );
}
